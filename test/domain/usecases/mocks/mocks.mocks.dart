// Mocks generated by Mockito 5.4.4 from annotations
// in task_management_app/test/domain/usecases/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:task_management_app/domain/entities/task_entity.dart' as _i4;
import 'package:task_management_app/domain/repository/task_repository.dart'
    as _i2;
import 'package:task_management_app/domain/usecases/add_task_usecase.dart'
    as _i5;
import 'package:task_management_app/domain/usecases/delete_task_usecase.dart'
    as _i6;
import 'package:task_management_app/domain/usecases/get_task_usecase.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskRepository_0 extends _i1.SmartFake
    implements _i2.TaskRepository {
  _FakeTaskRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetTasksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTasksUseCase extends _i1.Mock implements _i3.GetTasksUseCase {
  @override
  _i2.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskRepository);

  @override
  List<_i4.Task> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: <_i4.Task>[],
        returnValueForMissingStub: <_i4.Task>[],
      ) as List<_i4.Task>);
}

/// A class which mocks [AddTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTaskUseCase extends _i1.Mock implements _i5.AddTaskUseCase {
  @override
  _i2.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskRepository);

  @override
  void call(_i4.Task? task) => super.noSuchMethod(
        Invocation.method(
          #call,
          [task],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DeleteTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTaskUseCase extends _i1.Mock implements _i6.DeleteTaskUseCase {
  @override
  _i2.TaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTaskRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TaskRepository);

  @override
  void call(int? id) => super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValueForMissingStub: null,
      );
}
